dim(HIV)
for (i in 2:40000){
nGibbs[i]<-r+rnbinom(1,1+r,1-(1-pGibbs[i-1])^2)
pGibbs[i]<-rbeta(1,n1+n2+2*n3+1,2*nGibbs[i]-(n1+n3+n2+n3)+1)
}
nGibbsConv<-nGibbs[20001:40000]
pGibbsConv<-pGibbs[20001:40000]
hist(nGibbsConv,main="Estimation de N")
abline(v=mean(nGibbsConv),col="green")
abline(v=r+(n1*n2)/n3,col="blue")
abline(v=quantile(nGibbsConv,0.025),col="orange")
abline(v=quantile(nGibbsConv,0.975),col="orange")
legend("topright",legend=c("Moyenne des estimations","Estimateur naturelle","Intervalle Crédibilité 95%"),fill=c(3:4,"orange"))
paste("Estimateur naturelle:",r+(n1*n2)/n3)
paste("Moyenne des estimations:",mean(nGibbsConv))
paste0("Intervalle de Crédibilité à 95%:[",quantile(nGibbsConv,0.025),";",round(quantile(nGibbsConv,0.975),0),"]")
library(knitr)
#Simulation capture-recapture
n<-50  #Nombre d'individus à capturer
p<-0.2 #Probabilé d'etre capturé
c1<-rbinom(n,1,p)
c2<-rbinom(n,1,p)
#Calcul des taille intermediaire
n10<-sum((c1==1)*(c2==0))
n01<-sum((c1==0)*(c2==1))
n11<-sum((c1==1)*(c2==1))
r<-n01+n10+n11
kable(table(c1,c2))
#Initialisation parametres de Gibbs
pGibbs.simu<-0.2
nGibbs.simu<-NA
#algorithme implementation
for (i in 2:20000){
nGibbs.simu[i]<-r+rnbinom(1,1+r,1-(1-pGibbs.simu[i-1])^2)
pGibbs.simu[i]<-rbeta(1,n01+n10+2*n11+1,2*nGibbs.simu[i]-(n01+n11+n10+n11)+1)
}
(n.sim <- summary(nGibbs.simu))
(p.sim <- summary(pGibbs.simu))
r
install.packages("fda.usc")
remove.packages("fda.usc")
library(fda.usc)
remove.packages("fda.usc")
install.packages("fda.usc")
names(aemet)
#install.packages("fda.usc")
library(fda.usc)
data(aemet)
names(aemet)
temp<-aemet$temp
names(temp)
dim(temp)
length(argvals(temp))
rangeval(temp)
temp$names
is.fdata(aemet$temp)
is.fdata(aemet$df)
names(aemet)
l1<-split.fdata(temp,col1)
par(mfrow=c(1,2))
plot(l1[[1]],col=2,ylim=c(0,30))
plot(l1[[2]],col=4,ylim=c(0,30))
temp.fd=fdata2fd(temp,type.basis="fourier",nbasis=15)
temp.fdata=fdata(temp.fd) #back to fdata
class(temp.fd)
class(temp.fdata)
l1<-split.fdata(temp,col1)
par(mfrow=c(1,2))
plot(l1[[1]],col=2,ylim=c(0,30))
plot(l1[[2]],col=4,ylim=c(0,30))
data(aemet)
par(mfrow=c(1,2))
col1= ifelse(aemet$df$latitude<31,2,4)
plot(aemet$df[,c("longitude","latitude")],
col=col1,lwd=2)
plot(aemet$temp,col=col1,lwd=2)
#temps
l1<-split.fdata(temp,col1)
par(mfrow=c(1,2))
plot(l1[[1]],col=2,ylim=c(0,30))
plot(l1[[2]],col=4,ylim=c(0,30))
bsp11<-create.bspline.basis(temp$rangeval,nbasis=11)
bsp111<-create.bspline.basis(temp$rangeval,nbasis=111)
S.bsp11  <-  S.basis(temp$argvals, bsp11)
S.bsp111 <- S.basis(temp$argvals, bsp111)
temp.bsp11<-temp.bsp111<-temp
temp.bsp11$data <- temp$data%*%S.bsp11
temp.bsp111$data <- temp$data%*%S.bsp111
par(mfrow=c(1,3))
plot(temp)
plot(temp.bsp111,main="111 Bspline basis elements")
plot(temp.bsp11,main="11 Bspline basis elements")
absorp<-tecator$absorp
ind<-sample(215,129) #ind = 1:129
tt = absorp[["argvals"]]
y = tecator$y$Fat[ind]
X = absorp[ind, ]
X.d1 = fdata.deriv(X, nbasis = 19, nderiv = 1)
X.d2 = fdata.deriv(X, nbasis = 19, nderiv = 2)
par(mfrow=c(2,2))
plot(X)
plot(X.d1)
plot(X.d2)
boxplot(y)
data(tecator)
absorp<-tecator$absorp
ind<-sample(215,129) #ind = 1:129
tt = absorp[["argvals"]]
y = tecator$y$Fat[ind]
X = absorp[ind, ]
X.d1 = fdata.deriv(X, nbasis = 19, nderiv = 1)
X.d2 = fdata.deriv(X, nbasis = 19, nderiv = 2)
par(mfrow=c(2,2))
plot(X)
plot(X.d1)
plot(X.d2)
boxplot(y)
rangett <- X$rangeval
basis1 = create.bspline.basis(rangeval = rangett, nbasis = 17)
basis2 = create.bspline.basis(rangeval = rangett, nbasis = 7)
res.basis0 = fregre.basis(X, y, basis.x = basis1, basis.b = basis2)
res.basis1 = fregre.basis(X.d1, y, basis.x = basis1, basis.b = basis2)
res.basis2 = fregre.basis(X.d2, y, basis.x = basis1, basis.b = basis2)
res.basis0
par(mfrow=c(1,3))
plot(res.basis0$beta.est)
plot(res.basis1$beta.est)
plot(res.basis2$beta.est)
dataf = as.data.frame(tecator$y[ind,]) # Fat, Protein, Water
basis.pc2 = create.pc.basis(X.d2,1:4)
basis.x = list(X = basis.pc0, X.d2 =basis.pc2)
f = Fat ~ X+X.d2
ldata = list(df = dataf, X=X,X.d2=X.d2)
res.lm1 = fregre.lm(f, ldata, basis.x = basis.x)
f = Fat ~ Water+X.d2
res.lm2 = fregre.lm(f, ldata, basis.x = basis.x)
data(tecator)
x=tecator$absorp.fdata
tecator$y$Fat<-ifelse(tecator$y$Fat>20,1,0)
x.d1<-fdata.deriv(x)
dataf=as.data.frame(tecator$y)
ldata=list("df"=dataf,"x"=x,"x.d1"=x.d1)
ycat<-ldata$df$Fat
res.bin=fregre.glm(Fat~x,ldata,family=binomial())
res.gsam<-classif.glm(Fat~x,data=ldata)
summary(res.gsam)
##Regression logistique
library("randomForest")
dt.reg <-read.csv("F:/PROJETS/PROJET_RECHERCHE/LIP_UGA/data.csv",sep = ";", header = TRUE)
#distance physiq
sup <- c("Mc.Nair","HAD","Anxiété","Dépression","pathologie.démentielle",
"Profil","pathologie.démentielle","Vit.avec.la.personne.aidée.1",
"Vit.avec.la.personne.aidée","Aidant.principal","Démence",
"Autre.expérience.d.aide","Conjoint","Seul.aidant","Sexe")
var <- which(names(dt.reg)%in%sup)
formule1 <-as.formula(paste("Fradeau_Zarit ~",
paste(names(dt.reg[,-var]), collapse = " + ")))
rf = randomForest(formule1,
ntree = 100,
na.action = na.roughfix,
data = dt.reg)
varImpPlot(rf)
formule1
?varImpPlot
?plot
varImpPlot(rf,cex=0.6)
#distance physiq
sup <- c("Fradeau_Zarit","Mc.Nair","HAD","Anxiété","Dépression","pathologie.démentielle",
"Profil","pathologie.démentielle","Vit.avec.la.personne.aidée.1",
"Vit.avec.la.personne.aidée","Aidant.principal","Démence",
"Autre.expérience.d.aide","Conjoint","Seul.aidant","Sexe")
var <- which(names(dt.reg)%in%sup)
formule1 <-as.formula(paste("Fradeau_Zarit ~",
paste(names(dt.reg[,-var]), collapse = " + ")))
rf = randomForest(formule1,
ntree = 100,
na.action = na.roughfix,
data = dt.reg)
varImpPlot(rf,cex=0.6)
#Anxiété
sup <- c("Fradeau_Zarit","Mc.Nair","HAD","Anxiété","Dépression","pathologie.démentielle",
"Profil","pathologie.démentielle","Vit.avec.la.personne.aidée.1",
"Vit.avec.la.personne.aidée","Aidant.principal","Démence",
"Autre.expérience.d.aide","Conjoint","Seul.aidant","Sexe")
var <- which(names(dt.reg)%in%sup)
formule1 <-as.formula(paste("Anxiété ~",
paste(names(dt.reg[,-var]), collapse = " + ")))
rf = randomForest(formule1,
ntree = 100,
na.action = na.roughfix,
data = dt.reg)
varImpPlot(rf,cex=0.6)
#Dépression
sup <- c("Dépression","Mc.Nair","HAD","Anxiété","Fradeau_Zarit","pathologie.démentielle",
"Profil","pathologie.démentielle","Vit.avec.la.personne.aidée.1",
"Vit.avec.la.personne.aidée","Aidant.principal","Démence",
"Autre.expérience.d.aide","Conjoint","Seul.aidant","Sexe")
var <- which(names(dt.reg)%in%sup)
formule1 <-as.formula(paste("Dépression ~",
paste(names(dt.reg[,-var]), collapse = " + ")))
rf = randomForest(formule1,
ntree = 100,
na.action = na.roughfix,
data = dt.reg)
varImpPlot(rf,cex=0.6)
#Anxiété
sup <- c("Fradeau_Zarit","Mc.Nair","HAD","Anxiété","Dépression","pathologie.démentielle",
"Profil","pathologie.démentielle","Vit.avec.la.personne.aidée.1",
"Vit.avec.la.personne.aidée","Aidant.principal","Démence",
"Autre.expérience.d.aide","Conjoint","Seul.aidant","Sexe")
var <- which(names(dt.reg)%in%sup)
formule1 <-as.formula(paste("Anxiété ~",
paste(names(dt.reg[,-var]), collapse = " + ")))
rf = randomForest(formule1,
ntree = 100,
na.action = na.roughfix,
data = dt.reg)
varImpPlot(rf,cex=0.6)
#Fradeau_Zarit
sup <- c("Fradeau_Zarit","Mc.Nair","HAD","Anxiété","Dépression","pathologie.démentielle",
"Profil","pathologie.démentielle","Vit.avec.la.personne.aidée.1",
"Vit.avec.la.personne.aidée","Aidant.principal","Démence",
"Autre.expérience.d.aide","Conjoint","Seul.aidant","Sexe")
var <- which(names(dt.reg)%in%sup)
formule1 <-as.formula(paste("Fradeau_Zarit ~",
paste(names(dt.reg[,-var]), collapse = " + ")))
rf = randomForest(formule1,
ntree = 100,
na.action = na.roughfix,
data = dt.reg)
varImpPlot(rf,cex=0.6)
#Dépression
sup <- c("Dépression","Mc.Nair","HAD","Anxiété","Fradeau_Zarit","pathologie.démentielle",
"Profil","pathologie.démentielle","Vit.avec.la.personne.aidée.1",
"Vit.avec.la.personne.aidée","Aidant.principal","Démence",
"Autre.expérience.d.aide","Conjoint","Seul.aidant","Sexe")
var <- which(names(dt.reg)%in%sup)
formule1 <-as.formula(paste("Dépression ~",
paste(names(dt.reg[,-var]), collapse = " + ")))
rf = randomForest(formule1,
ntree = 100,
na.action = na.roughfix,
data = dt.reg)
varImpPlot(rf,cex=0.6)
summary(rf)
rf
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo=TRUE, results="hide")
require(survival)
scurve = function (ss, v, colors = c("deepskyblue", "black", "red"), main = "Survival",
legend, nb_sign = 3, legend_place = "topright", PLOT_LEGEND = TRUE,
cex.leg = 1, censoring, ...)
{
idx = !is.na(ss)
ss = ss[idx]
if (missing(v)) {
v = rep(1, sum(idx))
}
else {
v = v[idx]
}
if (!missing(censoring)) {
date = ss[, 1]
state = ss[, 2]
idx = !is.na(date) & date > censoring
date[idx] = censoring
state[idx] = 0
ss = survival::Surv(date, state)
}
if (length(unique(v)) == 1) {
cox_results = 1
}
else {
cox_results = coxres(ss, as.character(v))
}
pv = cox_results[1]
if (pv < 1e-100) {
pvt = "<1e-100"
}
else {
pvt = format(pv, digits = 3, scientific = TRUE)
}
sf = survival::survfit(ss ~ v)
levels = length(na.omit(unique(v)))
col = colorRampPalette(colors)(levels)
main = paste(main, " p_cox=", signif(as.numeric(pvt), nb_sign),
sep = "")
plot(sf, col = col, main = main, ...)
tab = table(v)
tab = tab[tab != 0]
if (PLOT_LEGEND) {
if (missing(legend)) {
if ("breaks" %in% names(attributes(v))) {
b = signif(attr(v, "breaks"), 3)
legend = paste("[", b[1:(length(b) - 1)], ",",
b[2:length(b)], c(rep("[", length(b) - 2),
"]"), sep = "")
}
else {
legend = names(tab)
}
}
legend = paste(legend, " (", tab, ")", sep = "")
legend(legend_place, legend = legend, col = col, pch = 3,
lty = 1, cex = cex.leg)
}
return(cox_results)
}
coxres = function (ss, v)
{
f = suppressWarnings(survival::coxph(ss ~ v))
sf = summary(f)
pvcox = sf$logtest[3]
tf = survival::cox.zph(f)
tf = tf$table
pvhz = tf[dim(tf)[1], 3]
hr = sf$conf.int[1, 1]
hrlb = sf$conf.int[1, 3]
hrub = sf$conf.int[1, 4]
res = c(pvcox, pvhz, hrlb, hr, hrub)
names(res) = c("pvcox", "pvhz", "hrlb", "hr", "hrub")
return(res)
}
exp_grp = readRDS(file="challenge_ssd2019_e.rds")
head(exp_grp)
dim(exp_grp)
data    = readRDS(file="challenge_ssd2019_d.rds")
head(data)
dim(data)
pf      = readRDS(file="challenge_ssd2019_p.rds")
head(pf)
dim(pf)
exp_grp=readRDS(file="challenge_ssd2019_e.rds")
head(exp_grp)
dim(exp_grp)
data=readRDS(file="challenge_ssd2019_d.rds")
head(data)
dim(data)
pf=readRDS(file="challenge_ssd2019_p.rds")
head(pf)
dim(pf)
exp_grp=readRDS(file="challenge_ssd2019_e.rds")
idx_nt = rownames(exp_grp)[exp_grp$tissue_status == "normal"]
idx_tu = rownames(exp_grp)[exp_grp$tissue_status == "tumoral"]
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo=TRUE, results="hide")
require(survival)
scurve = function (ss, v, colors = c("deepskyblue", "black", "red"), main = "Survival",
legend, nb_sign = 3, legend_place = "topright", PLOT_LEGEND = TRUE,
cex.leg = 1, censoring, ...)
{
idx = !is.na(ss)
ss = ss[idx]
if (missing(v)) {
v = rep(1, sum(idx))
}
else {
v = v[idx]
}
if (!missing(censoring)) {
date = ss[, 1]
state = ss[, 2]
idx = !is.na(date) & date > censoring
date[idx] = censoring
state[idx] = 0
ss = survival::Surv(date, state)
}
if (length(unique(v)) == 1) {
cox_results = 1
}
else {
cox_results = coxres(ss, as.character(v))
}
pv = cox_results[1]
if (pv < 1e-100) {
pvt = "<1e-100"
}
else {
pvt = format(pv, digits = 3, scientific = TRUE)
}
sf = survival::survfit(ss ~ v)
levels = length(na.omit(unique(v)))
col = colorRampPalette(colors)(levels)
main = paste(main, " p_cox=", signif(as.numeric(pvt), nb_sign),
sep = "")
plot(sf, col = col, main = main, ...)
tab = table(v)
tab = tab[tab != 0]
if (PLOT_LEGEND) {
if (missing(legend)) {
if ("breaks" %in% names(attributes(v))) {
b = signif(attr(v, "breaks"), 3)
legend = paste("[", b[1:(length(b) - 1)], ",",
b[2:length(b)], c(rep("[", length(b) - 2),
"]"), sep = "")
}
else {
legend = names(tab)
}
}
legend = paste(legend, " (", tab, ")", sep = "")
legend(legend_place, legend = legend, col = col, pch = 3,
lty = 1, cex = cex.leg)
}
return(cox_results)
}
coxres = function (ss, v)
{
f = suppressWarnings(survival::coxph(ss ~ v))
sf = summary(f)
pvcox = sf$logtest[3]
tf = survival::cox.zph(f)
tf = tf$table
pvhz = tf[dim(tf)[1], 3]
hr = sf$conf.int[1, 1]
hrlb = sf$conf.int[1, 3]
hrub = sf$conf.int[1, 4]
res = c(pvcox, pvhz, hrlb, hr, hrub)
names(res) = c("pvcox", "pvhz", "hrlb", "hr", "hrub")
return(res)
}
exp_grp=readRDS(file="challenge_ssd2019_e.rds")
head(exp_grp)
dim(exp_grp)
data=readRDS(file="challenge_ssd2019_d.rds")
head(data)
dim(data)
pf=readRDS(file="challenge_ssd2019_p.rds")
head(pf)
dim(pf)
idx_nt = rownames(exp_grp)[exp_grp$tissue_status == "normal"]
zip("C:/Users/Soubeiga Armel/Desktop/grps_chal.zip", "grps.rds")
shiny::runApp('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny')
runApp('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny')
runApp('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny')
runApp('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny')
runApp('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny')
#Importation de la carte ou domaine de krigeage
aus<-readShapePoly("E:\\base\\commune_bobo_utm.shp")
# Coordonnees de letendue spatiale de bobo
grx<- seq(bbox(aus)[1,1],bbox(aus)[1,2],by= 100)
gry<- seq(bbox(aus)[2,1],bbox(aus)[2,2],by= 100)
x<-rep(grx, length(gry))
y<-rep(gry, length(grx))
y<-sort(y, decreasing=F)
pt<-data.frame(x=x, y=y)
pts<-SpatialPoints(coordinates(pt))
# Definition du systeme de coordonnees
proj4string(pts) <- proj4string(aus)
#Repr?sentons
par(mar = c(0, 0, 0, 0))
plot(pts)
plot(aus,border = "red",lwd=3,add = T)
#Definition d'une table dattributs
mat <-data.frame(ID = paste("Random",1:37758 , sep = ""))
#Rajout ? la table dattributs
pts<- SpatialPointsDataFrame(pts, data = mat)
# Verification
pts[1:10, ]
# Jointure spatiale
join <-over(pts,aus)
#Classe de lobjet cree
class(join)
#Dimensions de lobjet cree
dim(join)
#Affichage du resultat
head(join)
#Rajout des identifiants
join<- data.frame(ID = pts@data[, "ID"], join)
# Verification
head(join)
#Identification des lignes avec NA
pos<-which(is.na(join[,"AREA"]))
# Suppression de ces lignes
join2<-join[-pos, ]
# Reinitialisation des noms de lignes
rownames(join2)<- NULL
# Verification
head(join2)
#convertir ce nouveau data.frame
join2<-SpatialPointsDataFrame(coords = pts@coords [-pos, ],data = join2)
# Verification
head(join2@data )
#representation des points
par(mar = c(0, 0, 0, 0))
plot(join2)
plot(aus,border="blue",lwd=3,add=T)
#construction de la grille
join2<-as(join2,"SpatialPoints")
gridded(join2)<-TRUE
par(mar = c(0, 0, 0, 0))
plot(join2)
library(imager)
install.packages("imager")
library(imager)
image <- load.image(C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny/image)
image <- load.image('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny/image')
image <- load.image('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny/image.jpg')
plot(image)
shiny::runApp('C:/Users/Soubeiga Armel/Desktop/Mes COURS/SSD_UGA/M2/Geos-stat/Druth/geoshiny')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?source
source
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
